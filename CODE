#include <Arduino.h>

// Піни для підключення до драйвера ULN2003
const int IN1 = 23;  // Пін для керування першою лінією драйвера
const int IN2 = 22;  // Пін для керування другою лінією драйвера
const int IN3 = 21;  // Пін для керування третьою лінією драйвера
const int IN4 = 19;  // Пін для керування четвертою лінією драйвера

// Піни для кнопок
const int button10cm = 15;  // Кнопка для 10 см
const int button20_5cm = 13;  // Кнопка для 20.5 см

// Кількість кроків для кожного з варіантів
const int steps10cm = 1304;  // Кроки для 10 см (оновлено вал 5см)
const int steps20_5cm = 2612; // Кроки для 20.5 см (оновлено вал 5см)

// Порядок кроків для двигуна (8 кроків)
const int stepSequence[8][4] = {
    {1, 0, 0, 0},  // Крок 1
    {1, 1, 0, 0},  // Крок 2
    {0, 1, 0, 0},  // Крок 3
    {0, 1, 1, 0},  // Крок 4
    {0, 0, 1, 0},  // Крок 5
    {0, 0, 1, 1},  // Крок 6
    {0, 0, 0, 1},  // Крок 7
    {1, 0, 0, 1}   // Крок 8
};

// Змінні для зберігання стану кнопок
bool lastButton10cmState = HIGH;  // Останній стан кнопки для 10 см
bool lastButton20_5cmState = HIGH;  // Останній стан кнопки для 20.5 см

// Час для debounce
unsigned long lastDebounceTime10cm = 0;  // Час останнього натискання кнопки 10 см
unsigned long lastDebounceTime20_5cm = 0;  // Час останнього натискання кнопки 20.5 см
unsigned long debounceDelay = 50;  // Затримка debounce (50 мс)

void setup() {
    Serial.begin(9600);  // Ініціалізація серійного порту для моніторингу

    // Налаштування піна для драйвера ULN2003
    pinMode(IN1, OUTPUT);  // Пін IN1 як вихід
    pinMode(IN2, OUTPUT);  // Пін IN2 як вихід
    pinMode(IN3, OUTPUT);  // Пін IN3 як вихід
    pinMode(IN4, OUTPUT);  // Пін IN4 як вихід

    // Налаштування кнопок
    pinMode(button10cm, INPUT_PULLUP);  // Кнопка 10 см з внутрішнім підтягуючим резистором
    pinMode(button20_5cm, INPUT_PULLUP);  // Кнопка 20.5 см з внутрішнім підтягуючим резистором
}

void loop() {
    // Читання стану кнопок
    bool reading10cm = digitalRead(button10cm);  // Стан кнопки для 10 см
    bool reading20_5cm = digitalRead(button20_5cm);  // Стан кнопки для 20.5 см

    // Перевірка кнопки для 10 см (з debounce)
    if (reading10cm == LOW && lastButton10cmState == HIGH && (millis() - lastDebounceTime10cm) > debounceDelay) {
        // Якщо кнопка натиснута і пройшла достатня кількість часу для debounce
        moveStepper(steps10cm);  // Викликаємо функцію для руху крокового двигуна на 10 см
        lastDebounceTime10cm = millis();  // Оновлюємо час останнього натискання
        Serial.print("Button 10 cm state: ");
        Serial.println("Pressed");  // Виведення в серійний монітор
    }

    // Перевірка кнопки для 20.5 см (з debounce)
    if (reading20_5cm == LOW && lastButton20_5cmState == HIGH && (millis() - lastDebounceTime20_5cm) > debounceDelay) {
        // Якщо кнопка натиснута і пройшла достатня кількість часу для debounce
        moveStepper(steps20_5cm);  // Викликаємо функцію для руху крокового двигуна на 20.5 см
        lastDebounceTime20_5cm = millis();  // Оновлюємо час останнього натискання
        Serial.print("Button 20.5 cm state: ");
        Serial.println("Pressed");  // Виведення в серійний монітор
    }

    // Оновлюємо останній стан кнопок
    lastButton10cmState = reading10cm;  // Оновлення стану кнопки для 10 см
    lastButton20_5cmState = reading20_5cm;  // Оновлення стану кнопки для 20.5 см
}

void moveStepper(int steps) {
    // Функція для руху крокового двигуна на задану кількість кроків
    for (int i = 0; i < steps; i++) {  // Виконуємо рух на вказану кількість кроків
        for (int j = 0; j < 8; j++) {  // Для кожного з 8 кроків послідовності
            // Встановлюємо відповідні стани на піні для керування двигуном
            digitalWrite(IN1, stepSequence[j][0]);
            digitalWrite(IN2, stepSequence[j][1]);
            digitalWrite(IN3, stepSequence[j][2]);
            digitalWrite(IN4, stepSequence[j][3]);
            delayMicroseconds(800);  // Затримка для кожного кроку для визначення швидкості руху
        }
    }
}
